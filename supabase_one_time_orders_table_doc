one_time_orders
No description available


Language: Javascript
Columns

Name	Format	Type	Description
id	
uuid

string	
user_id	
uuid

string	
created_at	
timestamp with time zone

string	
status	
text

string	
company_registry_code	
integer

number	
payment_status	
character varying

string	
payment_provider	
text

string	
arve_saaja	
text

string	Arve saaja t체체p: eraisik v천i firma
arve_saaja_juriidiline_aadress	
text

string	Arve saaja juriidiline aadress
tellija_eesnimi	
text

string	Tellija eesnimi
tellija_perenimi	
text

string	Tellija perekonnanimi
tellija_epost	
text

string	Tellija e-posti aadress
tellija_firma	
text

string	Ettev천tte nimi, kelle nimel tellimus tehakse
company_analyses_json	
jsonb

json	
user_context	
text

string	
company_details	
text

string	
company_name	
text

string	
prompt_tokens	
integer

number	quick_match
completion_tokens	
integer

number	quick_match
total_tokens	
integer

number	quick_match
total_characters	
integer

number	quick_match
prompt_cost	
numeric

number	quick_match
completion_cost	
numeric

number	quick_match
total_cost	
numeric

number	quick_match
qm_status	
text

string	
fm_prompt_tokens	
integer

number	
fm_completion_tokens	
integer

number	
fm_total_tokens	
integer

number	
fm_total_characters	
integer

number	
fm_prompt_cost	
numeric

number	
fm_completion_cost	
numeric

number	
fm_total_cost	
numeric

number	
fm_status	
text

string	
fm_started	
text

string	
confirmation_sent?	
text

string	
firma_reference_id	
uuid

string	
grants_scanned	
text

string	
updated_at	
text

string	
Read rows
Documentation
To read rows in this table, use the select method.

Read all rows

let { data: one_time_orders, error } = await supabase
  .from('one_time_orders')
  .select('*')
Read specific columns

let { data: one_time_orders, error } = await supabase
  .from('one_time_orders')
  .select('some_column,other_column')
Read referenced tables

let { data: one_time_orders, error } = await supabase
  .from('one_time_orders')
  .select(`
    some_column,
    other_table (
      foreign_key
    )
  `)
With pagination

let { data: one_time_orders, error } = await supabase
  .from('one_time_orders')
  .select('*')
  .range(0, 9)
Filtering
Documentation
Supabase provides a wide range of filters

With filtering

let { data: one_time_orders, error } = await supabase
  .from('one_time_orders')
  .select("*")

  // Filters
  .eq('column', 'Equal to')
  .gt('column', 'Greater than')
  .lt('column', 'Less than')
  .gte('column', 'Greater than or equal to')
  .lte('column', 'Less than or equal to')
  .like('column', '%CaseSensitive%')
  .ilike('column', '%CaseInsensitive%')
  .is('column', null)
  .in('column', ['Array', 'Values'])
  .neq('column', 'Not equal to')

  // Arrays
  .contains('array_column', ['array', 'contains'])
  .containedBy('array_column', ['contained', 'by'])

  // Logical operators
  .not('column', 'like', 'Negate filter')
  .or('some_column.eq.Some value, other_column.eq.Other value')
Insert rows
Documentation
insert lets you insert into your tables. You can also insert in bulk and do UPSERT.

insert will also return the replaced values for UPSERT.

Insert a row

const { data, error } = await supabase
  .from('one_time_orders')
  .insert([
    { some_column: 'someValue', other_column: 'otherValue' },
  ])
  .select()
Insert many rows

const { data, error } = await supabase
  .from('one_time_orders')
  .insert([
    { some_column: 'someValue' },
    { some_column: 'otherValue' },
  ])
  .select()
Upsert matching rows

const { data, error } = await supabase
  .from('one_time_orders')
  .upsert({ some_column: 'someValue' })
  .select()
Update rows
Documentation
update lets you update rows. update will match all rows by default. You can update specific rows using horizontal filters, e.g. eq, lt, and is.

update will also return the replaced values for UPDATE.

Update matching rows

const { data, error } = await supabase
  .from('one_time_orders')
  .update({ other_column: 'otherValue' })
  .eq('some_column', 'someValue')
  .select()
Delete rows
Documentation
delete lets you delete rows. delete will match all rows by default, so remember to specify your filters!

Delete matching rows

const { error } = await supabase
  .from('one_time_orders')
  .delete()
  .eq('some_column', 'someValue')
Subscribe to changes
Documentation
Supabase provides realtime functionality and broadcasts database changes to authorized users depending on Row Level Security (RLS) policies.

Subscribe to all events

const channels = supabase.channel('custom-all-channel')
  .on(
    'postgres_changes',
    { event: '*', schema: 'public', table: 'one_time_orders' },
    (payload) => {
      console.log('Change received!', payload)
    }
  )
  .subscribe()
Subscribe to inserts

const channels = supabase.channel('custom-insert-channel')
  .on(
    'postgres_changes',
    { event: 'INSERT', schema: 'public', table: 'one_time_orders' },
    (payload) => {
      console.log('Change received!', payload)
    }
  )
  .subscribe()
Subscribe to updates

const channels = supabase.channel('custom-update-channel')
  .on(
    'postgres_changes',
    { event: 'UPDATE', schema: 'public', table: 'one_time_orders' },
    (payload) => {
      console.log('Change received!', payload)
    }
  )
  .subscribe()
Subscribe to deletes

const channels = supabase.channel('custom-delete-channel')
  .on(
    'postgres_changes',
    { event: 'DELETE', schema: 'public', table: 'one_time_orders' },
    (payload) => {
      console.log('Change received!', payload)
    }
  )
  .subscribe()
Subscribe to specific rows

const channels = supabase.channel('custom-filter-channel')
  .on(
    'postgres_changes',
    { event: '*', schema: 'public', table: 'one_time_orders', filter: 'some_column=eq.some_value' },
    (payload) => {
      console.log('Change received!', payload)
    }
  )
  .subscribe()